#pragma kernel CSMain

float _DT;
float _Time;

int _Count;
int _VolDim;
float3 _Pos;
float3 _Dir;

#include "../Chunks/snoise.cginc"
#include "../Chunks/noise.cginc"
#include "../Chunks/sdfStruct.cginc"

float4x4 transform;


  struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float3 col;
    float2 uv;
    float debug;
  };


  struct Anchor {
    float3 pos;
    float3 nor;
    float3 tangent;
    float3 col;
    float2 uv;

  };

struct Repeller {
  float3 pos;
  float strength;
};

int _RepellerCount;

RWStructuredBuffer<Vert> vertBuffer;
RWStructuredBuffer<Anchor> anchorBuffer;
RWStructuredBuffer<Repeller> repellerBuffer;



// Not too fast!
float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > 1.5){ v = normalize( v ) *1.5; }
  return v;
}



#include "../Chunks/curlNoise.cginc"




#define NR_THREADS 64


float _MaxDist = 1;
float _MinDist = 0;
float _MaxForce = 1;
float _MinForce = 0;

float3 RepelForce(float3 pos){
  float3 force = float3(0,0,0);
  for( int i = 0; i < _RepellerCount;i++){
    float3 dif = repellerBuffer[i].pos - pos;

    float l = length(dif);
    if( l > 0.000000001 ){
      dif = normalize(dif);
      force -= dif* min( .01 / (l*l*l*l) , .3);//* lerp(_MinForce,_MaxForce, clamp(1+(l-_MaxDist)/(_MinDist-_MaxDist),0,1));
    }
  }

  return force;
}

[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {


  uint pID = threadID + u3GroupID.x * NR_THREADS;

  uint flip = pID % 2;

  if( pID < _Count ){

    Vert vert = vertBuffer[ pID ];
    Anchor anchor = anchorBuffer[pID];

    float3 force = float3(0,0,0);

    force += RepelForce( vert.pos );

    float3 dif = anchor.pos - vert.pos;
    force +=  dif;

     //force *= .1;

     force *= .01;
      float dampening = .94;//.99999;// - vert.life * .01;
     vert.vel += force;// * _DT * _DT;
     vert.pos += vert.vel;// * _DT;
     vert.vel *= dampening;

    // vert.pos = anchor.pos;
     vert.nor = anchor.nor;
     vert.col = anchor.col;
     vert.tangent = anchor.tangent;


    //vert.pos = float3( (hash(float(pID))-.5) * 2, 1.3, (hash(float(pID)*100)-.5) * 2);

    vertBuffer[pID] = vert;
  }


  
}